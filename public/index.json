[{"content":"Building a Dynamic GitHub Portfolio with AI and Automation We embarked on a project to create a dynamic and informative portfolio for our GitHub repositories. The goal was to automatically generate concise and engaging descriptions for each project, and then store those descriptions in a JSON file, ready to be used on a portfolio website. This project involved a blend of GitHub API interaction, AI-powered content generation, and automation through GitHub Actions. Here\u0026rsquo;s a behind-the-scenes look at how we built it, including key code snippets and helpful links.\nPhase 1: Gathering Repository Data\nOur first step was to gather the necessary data from our GitHub repositories. We wanted to extract information like:\nRepository name Languages used Topics Homepage URL To achieve this, we utilized the GitHub API. Here\u0026rsquo;s a snippet of our Python script:\nPython\nimport requests def get_repo_data(github_owner, github_token, topic=\u0026#34;project\u0026#34;): headers = {\u0026#39;Authorization\u0026#39;: f\u0026#39;token {github_token}\u0026#39;} api_url = f\u0026#34;https://api.github.com/search/repositories?q=user:{github_owner}+topic:{topic}\u0026#34; response = requests.get(api_url, headers=headers) response.raise_for_status() return response.json()[\u0026#34;items\u0026#34;] GitHub API Documentation: https://docs.github.com/en/rest Phase 2: AI-Powered Description Generation\nNext, we needed to generate compelling descriptions for each repository. This is where the power of AI came into play. We integrated the Gemini API into our Python script.\nWe crafted prompts that included the repository name, languages, and topics, and then sent them to the Gemini API. Here\u0026rsquo;s how we used the Gemini API:\nPython\nimport google.generativeai as genai def generate_description(repo_name, languages, topics, api_key): genai.configure(api_key=api_key) model = genai.GenerativeModel(\u0026#39;gemini-2.0-flash\u0026#39;) prompt = f\u0026#34;\u0026#34;\u0026#34; Generate a concise one-paragraph description for a GitHub repository. Repository Name: {repo_name} Languages Used: {\u0026#39;, \u0026#39;.join(languages)} Repository Topics: {\u0026#39;, \u0026#39;.join(topics)} Create a description that highlights the purpose, technologies, and topics. \u0026#34;\u0026#34;\u0026#34; response = model.generate_content(prompt) return response.text Google AI Studio (Gemini API): https://ai.google.dev/ Google Generative AI Python SDK: https://ai.google.dev/tutorials/python_quickstart Phase 3: Structuring the Data\nWe wanted to present the repository data in a specific JSON format, suitable for use in a portfolio website. This format included:\ntitle: Repository name description: Generated description imgSrc: Link to a screenshot (constructed dynamically) githubLink: Repository URL liveLink: Homepage URL We modified our Python script to structure the data in this format and then write it to a projects.json file.\nPython\nimport json def create_json(repos, api_key, github_owner, github_token, output_file=\u0026#34;projects.json\u0026#34;): descriptions = [] for repo in repos: # ... (extract languages, topics, homepage) ... description = generate_description(repo[\u0026#39;name\u0026#39;], languages, topics, api_key) img_src = f\u0026#34;https://raw.githubusercontent.com/{repo[\u0026#39;full_name\u0026#39;]}/master/screenshot.png\u0026#34; descriptions.append({ \u0026#34;title\u0026#34;: repo[\u0026#39;name\u0026#39;], \u0026#34;description\u0026#34;: description, \u0026#34;imgSrc\u0026#34;: img_src, \u0026#34;githubLink\u0026#34;: repo[\u0026#39;html_url\u0026#39;], \u0026#34;liveLink\u0026#34;: repo.get(\u0026#34;homepage\u0026#34;, None) }) with open(output_file, \u0026#34;w\u0026#34;) as f: json.dump(descriptions, f, indent=4) Phase 4: Automating with GitHub Actions\nTo make this process truly dynamic, we automated it using GitHub Actions. We created a workflow that would trigger every time a push was made to any repository in our GitHub profile.\nHere\u0026rsquo;s a snippet of our GitHub Actions workflow file (.github/workflows/generate_descriptions.yml):\nYAML\nname: Generate Repo Descriptions on: push: branches: - \u0026#39;*\u0026#39; jobs: generate_descriptions: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 - name: Set up Python uses: actions/setup-python@v4 with: python-version: \u0026#39;3.9\u0026#39; - name: Install dependencies run: pip install requests google-generativeai - name: Generate descriptions env: GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} run: | python main.py --api_key $GEMINI_API_KEY --github_owner ${{ github.repository_owner }} --github_token $GITHUB_TOKEN - name: GitHub Commit \u0026amp; Push uses: actions-js/push@v1.5 with: github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} message: \u0026#34;Update repo descriptions\u0026#34; branch: master directory: . force: true GitHub Actions Documentation: https://docs.github.com/en/actions1 GitHub Actions Secrets: https://docs.github.com/en/actions/security-guides/encrypted-secrets actions-js/push: https://github.com/actions-js/push Challenges and Solutions\nAuthentication: We used a personal access token (PAT) with the repo scope and stored it as a GitHub secret. Error Handling: We added try...except blocks and input validation to our Python script. Image Link Construction: We used f-strings to dynamically create the image links. Outcome\nThe project culminated in a fully automated system that generates and updates a JSON file containing descriptions of our GitHub projects. This JSON file can now be used to power a dynamic portfolio website, showcasing our work in a consistent and engaging manner.\n","permalink":"http://localhost:1313/posts/building-a-dynamic-github-portfolio-with-ai-and-automation/","summary":"I embarked on a project to create a dynamic and informative portfolio for my GitHub repositories. My goal was to automatically generate concise and engaging descriptions for each project, and then store those descriptions in a JSON file, ready to be used on a portfolio website.","title":"Building a Dynamic GitHub Portfolio with AI and Automation (with Code)"},{"content":"Step 1: Initiate a new vite-app npm create vite@latest This initializes a new vite app Here we are going to use React and TypeScript so select \u0026ldquo;React\u0026rdquo; and then select \u0026ldquo;TypeScript\u0026rdquo; then go into the app directory and run\nnpm install Now lets use Tailwind CSS in our project\nInstall Tailwind CSS Install tailwindcss and @tailwindcss/vite via npm.\nnpm install tailwindcss @tailwindcss/vite Configure the vite plugin Add the @tailwindcss/vite plugin to your Vite configuration.\nimport { defineConfig } from \u0026#39;vite\u0026#39; import tailwindcss from \u0026#39;@tailwindcss/vite\u0026#39; export default defineConfig({ plugins: [ tailwindcss(), ], }) Import Tailwind CSS Add an @import to your CSS file that imports Tailwind CSS. Note: here we will remove App.css and add this import in index.css\n@import \u0026#34;tailwindcss\u0026#34;; Step 2: Remove the base app configs After removing the base configs:\nApp.tsx\nfunction App() { return ( \u0026lt;\u0026gt;\u0026lt;/\u0026gt; ) } export default App index.css\n@import \u0026#34;tailwindcss\u0026#34;; As said above we can remove src/App.css, src/assets/react.svg and public/vite.svg And we can change the title in index.html\nStep 3: Now let\u0026rsquo;s create a basic webpage create a nav bar that shows options to login and implement authentication For authentication and database, we will be using Google Firebase So create a project in firebase and let\u0026rsquo;s get going.\n","permalink":"http://localhost:1313/posts/idea-board/","summary":"A basic web app \u0026ldquo;Idea Board\u0026rdquo; to store our ideas","title":"Idea Board"},{"content":"Obsidian Obsidian is an excellent note-taking app. Download it from Obsidian.md.\nThe Setup Create a new folder named posts. Store all your posts inside this folder; the rest of the files will remain untouched. Hugo Prerequisites Install Git Install Go Install Hugo Follow the instructions at Hugo Installation Guide.\nCreate a New Site # Verify Hugo installation hugo version # Create a new site hugo new site \u0026lt;site-name\u0026gt; cd \u0026lt;site-name\u0026gt; Download a Hugo Theme Explore themes at Hugo Themes.\nInstall a theme (e.g., PaperMod) as a Git submodule:\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod Follow the theme\u0026rsquo;s documentation to complete the setup.\nSample hugo.toml File baseURL = \u0026#34;https://examplesite.com/\u0026#34; title = \u0026#34;ExampleSite\u0026#34; paginate = 5 theme = \u0026#34;PaperMod\u0026#34; enableRobotsTXT = true [params] env = \u0026#34;production\u0026#34; title = \u0026#34;ExampleSite\u0026#34; description = \u0026#34;ExampleSite description\u0026#34; keywords = [\u0026#34;Blog\u0026#34;, \u0026#34;Portfolio\u0026#34;, \u0026#34;PaperMod\u0026#34;] author = \u0026#34;Me\u0026#34; defaultTheme = \u0026#34;auto\u0026#34; ShowReadingTime = true ShowWordCount = true Test Hugo Site hugo server -t PaperMod Note: The page may appear empty initially because no posts are added yet. Copy the posts folder from Obsidian into the content folder of your Hugo site.\nBlog Properties Add properties (front matter) to your Markdown files. For example:\n--- title: My Blog Pipeline date: 2024-11-28 draft: false tags: - blog --- Use the Templater plugin in Obsidian to streamline this process.\nAttachments To simplify image handling in Obsidian:\nSet the default location for attachments to \u0026ldquo;In subfolder under current folder.\u0026rdquo; Add ../ before the image address to reference it correctly. Deploy Hugo Site Build the Hugo Site hugo The output will be in the public folder. Deploy this folder to platforms like Vercel or Cloudflare Pages.\nAutomate Deployment Create a GitHub Action to automate building and deploying your site:\nname: Build and Deploy Hugo Site on: push: branches: - master jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout Repository uses: actions/checkout@v4 - name: Install Hugo run: | HUGO_VERSION=\u0026#34;0.139.2\u0026#34; wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz tar -xvzf hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz sudo mv hugo /usr/local/bin/hugo rm hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz - name: Build Hugo Site run: | rm -rf public hugo - name: Deploy to GitHub env: GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} run: | git config user.name \u0026#34;GitHub Actions Bot\u0026#34; git config user.email \u0026#34;github-actions[bot]@users.noreply.github.com\u0026#34; git add . git commit -m \u0026#34;Deploy site $(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push --force \u0026#34;https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}\u0026#34; HEAD:master Add .gitignore Prevent merge conflicts by ignoring the public folder:\n# .gitignore public Setup Personal Access Token (PAT) Generate a PAT at GitHub PAT Settings. Add it as a secret (PERSONAL_ACCESS_TOKEN) in your repository settings under Settings \u0026gt; Secrets and Variables \u0026gt; Actions. With this setup, you can manage your Hugo blog seamlessly, integrating it with Obsidian for content creation and automating deployments via GitHub Actions.\n","permalink":"http://localhost:1313/posts/my-blog-pipeline/","summary":"\u003ch2 id=\"obsidian\"\u003e\u003cstrong\u003eObsidian\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eObsidian is an excellent note-taking app. Download it from \u003ca href=\"https://obsidian.md\"\u003eObsidian.md\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"the-setup\"\u003e\u003cstrong\u003eThe Setup\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eCreate a new folder named \u003ccode\u003eposts\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eStore all your posts inside this folder; the rest of the files will remain untouched.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"hugo\"\u003e\u003cstrong\u003eHugo\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"prerequisites\"\u003e\u003cstrong\u003ePrerequisites\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/git-guides/install-git\"\u003eInstall Git\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://go.dev/dl\"\u003eInstall Go\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"install-hugo\"\u003e\u003cstrong\u003eInstall Hugo\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eFollow the instructions at \u003ca href=\"https://gohugo.io/installation\"\u003eHugo Installation Guide\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"create-a-new-site\"\u003e\u003cstrong\u003eCreate a New Site\u003c/strong\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Verify Hugo installation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Create a new site\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new site \u0026lt;site-name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u0026lt;site-name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-hugo-theme\"\u003e\u003cstrong\u003eDownload a Hugo Theme\u003c/strong\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eExplore themes at \u003ca href=\"https://themes.gohugo.io\"\u003eHugo Themes\u003c/a\u003e.\u003c/p\u003e","title":"MY BLOG PIPELINE"},{"content":"This is test 2\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;. ","permalink":"http://localhost:1313/posts/test2/","summary":"\u003cp\u003eThis is test 2\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;.\n\u003cimg loading=\"lazy\" src=\"../attachments/Pasted%20image%2020241209210600.png\"\u003e\u003c/p\u003e","title":""}]